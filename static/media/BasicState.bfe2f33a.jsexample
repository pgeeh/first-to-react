class ClassState extends React.Component {
  constructor(props) {
    super(props)
    // State needs to be initialized in the constructor
    // for Class Components
    this.state = {
      count: 0,
      // This property is used to show that state is merged using
      // setState and not completely overwritten
      other: 'Still here!',
    };

    // Since this will be passed as a callback, we need to
    // bind it to the class' scope
    this.update = this.update.bind(this);
  }

  update() {
    // Class components have a generic method to update state
    // It does a shallow (first-level only) assign of values, so
    // not every value has to be sent, only the ones you wish to change
    this.setState({
      count: this.state.count + 1,
    });
  }

  render() {
    return (
      <div onClick={this.update}>
        Class {this.props.name} has clicked {this.state.count} times! ({this.state.other})
      </div>
    );
  }
}

function FunctionalState(props) {
  // useState returns an array of the current value
  // and a function to change the value
  const [count, setCount] = React.useState(0);

  // useCallback provides a function to update the count.
  // 'update' will change everytime 'count' changes so that
  // it always sets the correct next value
  const update = React.useCallback(() => {
    setCount(count + 1);
  }, [count]);

  return (
    <div onClick={update}>
      Functional {props.name} has been clicked {count} times!
    </div>
  )
}

const initial = {
  name: 'Basic State Example',
};

render(
  <PropOverride initial={initial}>
    <ClassState name={initial.name}/>
    <br />
    <FunctionalState name={initial.name}/>
  </PropOverride>
);
