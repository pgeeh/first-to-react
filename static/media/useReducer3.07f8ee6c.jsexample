const ACTIONS = {
  CREATE: 'create',
  FINISH: 'finish',
  REMOVE: 'remove',
  CLEAR: 'clear',
};

function init() {
  return {
    todos: [],
  };
}

function createId() {
  return Math.floor(Math.random() * 1000 * 1000 * 1000) + 1;
};

function reduce(state, action) {
  switch (action.type) {
    case ACTIONS.CREATE: {
      return {
        ...state,
        todos: [
          ...state.todos,
          {
            text: action.payload.text,
            finished: false,
            id: createId(),
          },
        ],
      };
    }
    case ACTIONS.FINISH: {
      const updatedTodos = [...state.todos];
      updatedTodos.forEach((todo) => {
        if (todo.id === action.payload.id) {
          todo.finished = true;
        }
      });
      return {
        ...state,
        todos: updatedTodos,
      };
    }
    case ACTIONS.REMOVE: {
      return {
        ...state,
        todos: state.todos.filter((t) => {
          return t.id !== action.payload.id;
        }),
      }
    }
    case ACTIONS.CLEAR: {
      return init();
    }
    default: {
      return state;
    }
  }
}

function Todo(props) {
  const {dispatch, todo} = props;

  const finish = React.useCallback(() => {
    dispatch({
      type: ACTIONS.FINISH,
      payload: {
        id: todo.id,
      },
    });
  }, [dispatch, todo]);

  const remove = React.useCallback(() => {
    dispatch({
      type: ACTIONS.REMOVE,
      payload: {
        id: todo.id,
      },
    });
  }, [dispatch, todo]);

  const text = todo.finished !== true ?
    todo.text : (<i>{todo.text}</i>);
  return (
    <li>
      {text} 
      <button onClick={finish}>Finish</button> 
      <button onClick={remove}>Remove</button>
    </li>
  );
}

function TodoList(props) {
  const [state, dispatch] = React.useReducer(reduce, [], init);
  const [text, setText] = React.useState('');

  const create = React.useCallback(() => {
    setText('');
    dispatch({
      type: ACTIONS.CREATE,
      payload: {
        text,
      }
    });
  }, [dispatch, text]);

  const clear = React.useCallback(() => {
    setText('');
    dispatch({
      type: ACTIONS.CLEAR,
    });
  }, [dispatch, setText]);

  const onChange = React.useCallback((e) => {
    setText(e.target.value);
  }, [setText]);

  return (
    <div>
      <div><input type='text' value={text} onChange={onChange}/></div>
      <div>
        <button onClick={create}>Create</button>
        <button onClick={clear}>Reset</button>
      </div>
      <ul>
        {state.todos.map((todo) => (
          <Todo key={todo.id} dispatch={dispatch} todo={todo} />
        ))}
      </ul>
    </div>
  );
}

render(
  <TodoList />
);
