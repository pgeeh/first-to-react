// The '...extra' syntax allows for passing through props to children
function Button({onClick, style, ...extra}) {
  return (
    <button style={style} onClick={onClick} {...extra}>Click me!</button>
  );
}

// This button styles the inner button as 'blue'
function BlueButton({...extra}) {
  return (
    <Button style={{color:'blue'}} {...extra} />
  );
}

function GreenButton({...extra}) {
  return (
    <Button style={{color:'green'}} {...extra} />
  );
}

// This tracks a specific button's clicks, as well as shows additional information
// passed as child elements.
// 'button: ButtonToUse' converts the 'button' prop to uppercased 'ButtonToUse', so React
// will render it as a component. This is an alternative to passing
// directly as a capitalized prop, which is generally avoided.
function TrackedButton({children, onClick, button: ButtonToUse, ...extra}) {
  const [count, setCount] = React.useState(0);
  
  const innerClick = React.useCallback(() => {
    setCount(count + 1);
    onClick();
  }, [count, onClick]);

  return (
    <div style={{margin: '10px'}}>
      <div>This button has been clicked {count} times!</div>
      <ButtonToUse onClick={innerClick} {...extra} />
      {children}
    </div>
  )
}

function Composition(props) {
  const {disabled} = props;
  const [count, setCount] = React.useState(0);
  
  const onClick = React.useCallback(() => {
    setCount(count + 1);
  }, [count]);
  
  return (
    <div>
      <div>Any button has been clicked {count} times.</div>
      <TrackedButton onClick={onClick} button={Button} disabled={disabled}>
        {disabled === true ? <div>Cannot click - disabled!</div> : null}
      </TrackedButton>
      <TrackedButton onClick={onClick} button={GreenButton} />
      <TrackedButton onClick={onClick} button={BlueButton}>
        <div>Some additional information here</div>
      </TrackedButton>
    </div>
  );
}

const initial = {
  disabled: true
};

render(
  <PropOverride initial={initial}>
    <Composition />
  </PropOverride>
);
